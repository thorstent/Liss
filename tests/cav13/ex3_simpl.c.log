Running actions
Building sequential automaton
6 rounds; seen states: 8; transitions: 8
Checking if the trace is actually a counter example
3 rounds; seen states: 3; transitions: 2
Not Included
0-w(shutdown)[ex3_simpl.c:17]
1-wn(napi_poll)[ex3_simpl.c:29]
0-no(napi_poll)[ex3_simpl.c:18]
1-r(shutdown)[ex3_simpl.c:31]
Find all sequential traces
Find concurrent traces that are not sequential
All bad traces: 
(*) 0-w(shutdown)[ex3_simpl.c:17] < 1-r(shutdown)[ex3_simpl.c:31] /\ 1-wn(napi_poll)[ex3_simpl.c:29] < 0-no(napi_poll)[ex3_simpl.c:18]
Found constraints to eliminate bad traces
Locks inferred: 
l1 (1-wn(napi_poll)[ex3_simpl.c:29]-1-r(shutdown)[ex3_simpl.c:31], 0-w(shutdown)[ex3_simpl.c:17]-0-no(napi_poll)[ex3_simpl.c:18])
1-wn(napi_poll)[ex3_simpl.c:29]
1-r(shutdown)[ex3_simpl.c:31]
-------------------
0-w(shutdown)[ex3_simpl.c:17]
0-no(napi_poll)[ex3_simpl.c:18]
-------------------


TIME - Iteration 1: 0.023s

11 rounds; seen states: 11; transitions: 15
Included
Synthesis was successful.
Threads: 2
Iterations: 1
Liss: 0s
Verification: 0s
Synthesis: 0.023s
Memory: 30MB
Total number of conflicts found: 1
2 | 1 | 1 | 0s | 0.023s | 0s | 0.023s | 30MB
Lock statistics:
---------------
Starting lock placement for absmin
Cost function 2: Absolute minimum of instructions inside a lock:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 4
Time for this cost function: 0.001s

Starting lock placement for small
Cost function 3: Smallest locks:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 4
Time for this cost function: 0.001s

Starting lock placement for coarse
Cost function 4: Coarse locks:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 4
Time for this cost function: 0.002s

