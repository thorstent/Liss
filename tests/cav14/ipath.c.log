Running actions
Building sequential automaton
27 rounds; seen states: 36; transitions: 52
Found candidate ... Checking if truely a counter-example(size=12)
9 rounds; seen states: 9; transitions: 8
Not Included; bound
1-lo(l)[ipath.c:46]
1-r(ipath_pd)[ipath.c:49]
1-un(l)[ipath.c:51]
0-lo(l)[ipath.c:29]
0-r(ipath_pd)[ipath.c:32]
1-w(block)[ipath.c:56]
1-w(block)[ipath.c:58]
1-w(ipath_pd)[ipath.c:62]
0-r(ipath_pd)[ipath.c:35]
0-un(l)[ipath.c:39]
Find all sequential traces
Find concurrent traces that are not sequential
All bad traces: 
(*) 0-r(ipath_pd)[ipath.c:32] < 1-w(ipath_pd)[ipath.c:62] /\ 1-w(ipath_pd)[ipath.c:62] < 0-r(ipath_pd)[ipath.c:35]
Found constraints to eliminate bad traces
Locks inferred: 
l1 (1-w(ipath_pd)[ipath.c:62]-1-w(ipath_pd)[ipath.c:62], 0-r(ipath_pd)[ipath.c:32]-0-r(ipath_pd)[ipath.c:35])
1-w(ipath_pd)[ipath.c:62]
-------------------
0-r(ipath_pd)[ipath.c:32]
0-r(ipath_pd)[ipath.c:35]
-------------------


TIME - Iteration 1: 0.057s

35 rounds; seen states: 42; transitions: 66
Found candidate ... Checking if truely a counter-example(size=12)
9 rounds; seen states: 9; transitions: 8
Candidate is not a counter-example
Increasing the bound to 2
39 rounds; seen states: 47; transitions: 73
Found candidate ... Checking if truely a counter-example(size=12)
9 rounds; seen states: 9; transitions: 8
Candidate is not a counter-example
Increasing the bound to 3
31 rounds; seen states: 49; transitions: 52
Included
Synthesis was successful.
Threads: 2
Iterations: 1
Liss: 0s
Verification: 0s
Synthesis: 0.056s
Memory: 31MB
Total number of conflicts found: 1
2 | 1 | 3 | 0s | 0.056s | 0s | 0.056s | 31MB
Lock statistics:
---------------
Starting lock placement for absmin
Lock placement succeeded!
Cost function 2: Absolute minimum of instructions inside a lock:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 3
Time for this cost function: 0.004s

Starting lock placement for coarse
Lock placement succeeded!
Cost function 3: Coarse locks:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 7
Time for this cost function: 0.013s

Starting lock placement for unopt
Lock placement succeeded!
Cost function 4: No cost function:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 3
Time for this cost function: 0.003s

Starting lock placement for small
Lock placement succeeded!
Cost function 5: Smallest locks:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 3
Time for this cost function: 0.004s

Starting lock placement for maxconc
Finished making 80 constraints for 2 threads!
Lock placement succeeded!
Cost function 6: Maximum concurrency:
Number of locks used: 1
Number of lock operations: 2
Number of unlock operations: 2
Number of abstract instructions inside a lock: 3
Time for this cost function: 0.004s

